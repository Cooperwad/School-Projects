
/*
Cooper Waddington
CSC214-401
Final Project - Alarm Clock
10/26/2023
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdint.h>
#include <time.h>
#include <pthread.h>
#include <unistd.h>
#include <wiringPi.h>
#include <wiringPiSPI.h>

#define SPI_CHANNEL 0
#define SPI_SPEED 1000000
#define NUM_MAX7219 4

volatile int alarmHour = -1;
volatile int alarmMinute = -1;
volatile int alarmSet = 0;
#define BUZZER_PIN 1

// send data to a specific max7219
void sendToMax(int maxNumber, unsigned char reg, unsigned char value) {
    unsigned char data[2 * NUM_MAX7219];
        for (int i = 0; i < 2 * NUM_MAX7219; i++) {
        data[i] = 0x00;
    }
    
    // calculate the position in the array for the chip we want to address
    // if the chips are in reverse order, we need to invert the maxNumber
    int position = 2 * (NUM_MAX7219 - 1 - maxNumber);
    data[position] = reg;
    data[position + 1] = value;
    wiringPiSPIDataRW(SPI_CHANNEL, data, 2 * NUM_MAX7219);
}


// initialize max7219 chips
void initMax7219(void) {
    int i;
    for(i = 0; i < NUM_MAX7219; ++i) {
        sendToMax(i, 0x0C, 0x01); // turn on the display
        sendToMax(i, 0x0B, 0x07); // set scan limit to 8 digits
        sendToMax(i, 0x09, 0x00); // use LED matrix 
        sendToMax(i, 0x0A, 0x08); // set intensity 
        sendToMax(i, 0x0F, 0x00); // exit display test mode
    }
}

// clear all displays
void clearMax7219(void) {
    int i, j;
    for(i = 0; i < NUM_MAX7219; ++i) {
        for(j = 1; j <= 8; ++j) {
            sendToMax(i, j, 0x00);
        }
    }
}

// display time on max7219
void displayTime(struct tm *timeinfo) {
    // convert 24 hour to 12 hour format
    int hour = timeinfo->tm_hour;
    int pmFlag = hour >= 12;
    hour = hour % 12;
    hour = hour ? hour : 12; // Convert '0' to '12'

    // define the patterns for each numeral from 0 to 9
    unsigned char digitPatterns[10][8] = {
        {0b00000000, 0b00111100, 0b01100110, 0b01100110, 0b01100110, 0b01100110, 0b00111100, 0b00000000},
        {0b00000000, 0b00011000, 0b00111000, 0b00011000, 0b00011000, 0b00011000, 0b01111110, 0b00000000},
        {0b00000000, 0b00111100, 0b01100110, 0b00001100, 0b00110000, 0b01100000, 0b01111110, 0b00000000},
        {0b00000000, 0b00111100, 0b01100110, 0b00001100, 0b00000110, 0b01100110, 0b00111100, 0b00000000},
        {0b00000000, 0b00001100, 0b00011100, 0b00101100, 0b01001100, 0b01111110, 0b00001100, 0b00000000},
        {0b00000000, 0b01111110, 0b01100000, 0b01111100, 0b00000110, 0b00000110, 0b01111100, 0b00000000},
        {0b00000000, 0b00111100, 0b01100000, 0b01111100, 0b01100110, 0b01100110, 0b00111100, 0b00000000},
        {0b00000000, 0b01111110, 0b00000110, 0b00001100, 0b00011000, 0b00011000, 0b00011000, 0b00000000},
        {0b00000000, 0b00111100, 0b01100110, 0b00111100, 0b01100110, 0b01100110, 0b00111100, 0b00000000},
        {0b00000000, 0b00111100, 0b01100110, 0b01100110, 0b00111110, 0b00000110, 0b00111100, 0b00000000}

    };
    
    // clear all displays before setting new data
    clearMax7219();
    
    int tens = hour / 10;
    int ones = hour % 10;
    int minTens = timeinfo->tm_min / 10;
    int minOnes = timeinfo->tm_min % 10;

    // prepare the data for each max7219 chip
    unsigned char dataForMax[NUM_MAX7219][8];
    memset(dataForMax, 0, sizeof(dataForMax)); 

    // setting data for each chip
    for (int i = 0; i < 8; i++) {
        dataForMax[3][i] = digitPatterns[tens][i];     // hours tens
        dataForMax[2][i] = digitPatterns[ones][i];     // hours ones
        dataForMax[1][i] |= digitPatterns[minTens][i]; // minutes tens
        dataForMax[0][i] = digitPatterns[minOnes][i];  // minutes ones
    }

    // sending data to chips
    for (int chip = 0; chip < NUM_MAX7219; chip++) {
        for (int reg = 1; reg <= 8; reg++) {
            sendToMax(chip, reg, dataForMax[chip][reg - 1]);
        }
    }
}

// set the state of the buzzer
void setBuzzer(int state) {
    digitalWrite(BUZZER_PIN, state);
}

// function for handling the alarm
void *alarmHandler(void *args) {
    while (1) {
        char response;
        int inputHour, inputMinute;
        char ampm[3];

        printf("Set an alarm? (y/n): ");
        scanf(" %c", &response);

        if (response == 'y' || response == 'Y') {
            printf("Enter alarm time (HH MM AM/PM): ");
            scanf("%d %d %2s", &inputHour, &inputMinute, ampm);

            // convert to 24-hour format
            if (strcmp(ampm, "PM") == 0 && inputHour < 12) {
                inputHour += 12;
            } else if (strcmp(ampm, "AM") == 0 && inputHour == 12) {
                inputHour = 0;
            }

            alarmHour = inputHour;
            alarmMinute = inputMinute;
            alarmSet = 1;

            printf("Alarm set for %02d:%02d %s\n", alarmHour, alarmMinute, ampm);
        } else if (response == 'n' || response == 'N') {
            break; 
        }
    }
    return NULL;
}

int main() {
    // setup and initialization
    if (wiringPiSetup() == -1) {
        fprintf(stderr, "wiringPi setup failed.\n");
        return 1;
    }
    pinMode(BUZZER_PIN, OUTPUT);
    setBuzzer(LOW);

    if (wiringPiSPISetup(SPI_CHANNEL, SPI_SPEED) == -1) {
        fprintf(stderr, "SPI setup failed.\n");
        return 1;
    }
    initMax7219();
    clearMax7219();

    // create a thread for the alarm functionality
    pthread_t alarmThread;
    if (pthread_create(&alarmThread, NULL, alarmHandler, NULL) != 0) {
        fprintf(stderr, "Failed to create the alarm thread.\n");
        return 1;
    }

    // main loop for the clock and alarm checking
    while (1) {
        time_t currentTime = time(NULL);
        struct tm *currentLocalTime = localtime(&currentTime);

        // ppdate and display time
        displayTime(currentLocalTime);

        // check if it's time to trigger the alarm
        if (alarmSet && currentLocalTime->tm_hour == alarmHour && currentLocalTime->tm_min == alarmMinute) {
            setBuzzer(HIGH); // trigger the buzzer
            sleep(1); // keep the buzzer on for 1 second
            setBuzzer(LOW); // turn off the buzzer
            alarmSet = 0; // reset the alarm
        }
        sleep(1); // wait for one second
    }

    // clean up
    pthread_join(alarmThread, NULL);
    return 0;
}
