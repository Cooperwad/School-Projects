




#include <wiringPi.h>
#include <wiringPiSPI.h>
#include <stdio.h>
#include <time.h>

#define NUM_MAX7219 4
#define SPI_CHANNEL 0
#define SPI_SPEED   1000000  // 1 MHz

// Function to send data to a single MAX7219 chip


void sendToMax(unsigned char reg, unsigned char data[NUM_MAX7219]) {
    unsigned char buffer[2 * NUM_MAX7219];
    for (int i = 0; i < NUM_MAX7219; ++i) {
        buffer[i * 2] = reg;
        buffer[i * 2 + 1] = data[i];
    }
    wiringPiSPIDataRW(SPI_CHANNEL, buffer, 2 * NUM_MAX7219);
}


// Function to initialize all MAX7219 chips
void initMax7219(void) {
    unsigned char noOpData[NUM_MAX7219] = {0};
    unsigned char scanLimitData[NUM_MAX7219] = {0x07}; // 8 digits
    unsigned char intensityData[NUM_MAX7219] = {0x03}; // Intensity: 3 (0x00 to 0x0F)
    unsigned char shutdownData[NUM_MAX7219] = {0x01}; // Normal operation
    unsigned char displayTestData[NUM_MAX7219] = {0x00}; // No display test

    sendToMax(0x09, noOpData); // Decode mode: no decode for any digit
    sendToMax(0x0A, intensityData); // Intensity
    sendToMax(0x0B, scanLimitData); // Scan limit
    sendToMax(0x0C, shutdownData); // Shutdown register: normal operation
    sendToMax(0x0F, displayTestData); // Display test register: no display test
}


// Function to clear all MAX7219 displays
void clearMax7219(void) {
    unsigned char clearData[NUM_MAX7219] = {0x00}; // Data for all MAX7219 to clear display
    for (int reg = 1; reg <= 8; ++reg) { // Iterate over all 8 digits
        sendToMax(reg, clearData);
    }
}

// Function to update and display the time
void displayTime(struct tm *timeinfo) {
    int hour = timeinfo->tm_hour % 24; // keep hour in 24-hour format for AM/PM calculation
    int pmFlag = hour >= 12; // Determine AM/PM
    hour = hour % 12;
    hour = hour ? hour : 12; // Convert 0 to 12 for display

    // Define digit patterns for 0-9 in horizontal orientation, LSB on the right
    unsigned char digitPatterns[10][8] = {
        // 0
        {0b00000000, 0b00111100, 0b01100110, 0b01100110, 0b01100110, 0b01100110, 0b00111100, 0b00000000},
        // 1
        {0b00000000, 0b00011000, 0b00111000, 0b00011000, 0b00011000, 0b00011000, 0b01111110, 0b00000000},
        // 2
        {0b00000000, 0b00111100, 0b01100110, 0b00001100, 0b00110000, 0b01100000, 0b01111110, 0b00000000},
        // 3
        {0b00000000, 0b00111100, 0b01100110, 0b00001100, 0b00000110, 0b01100110, 0b00111100, 0b00000000},
        // 4
        {0b00000000, 0b00001100, 0b00011100, 0b00101100, 0b01001100, 0b01111110, 0b00001100, 0b00000000},
        // 5
        {0b00000000, 0b01111110, 0b01100000, 0b01111100, 0b00000110, 0b00000110, 0b01111100, 0b00000000},
        // 6
        {0b00000000, 0b00111100, 0b01100000, 0b01111100, 0b01100110, 0b01100110, 0b00111100, 0b00000000},
        // 7
        {0b00000000, 0b01111110, 0b00000110, 0b00001100, 0b00011000, 0b00011000, 0b00011000, 0b00000000},
        // 8
        {0b00000000, 0b00111100, 0b01100110, 0b00111100, 0b01100110, 0b01100110, 0b00111100, 0b00000000},
        // 9
        {0b00000000, 0b00111100, 0b01100110, 0b01100110, 0b00111110, 0b00000110, 0b00111100, 0b00000000}
    };

    unsigned char colonPattern[8] = {0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00};

    // Clear all displays before setting new data
    clearMax7219();

    // Create an array to hold the data for each MAX7219
    unsigned char dataForMax[NUM_MAX7219][8] = {0};

    // Set hours tens digit pattern
    int digit = hour / 10;
    for(int i = 0; i < 8; ++i) {
        dataForMax[0][i] = digitPatterns[digit][i];
    }

    // Set hours ones digit pattern
    digit = hour % 10;
    for(int i = 0; i < 8; ++i) {
        dataForMax[1][i] = digitPatterns[digit][i];
    }

    // Set minutes tens digit pattern
    digit = timeinfo->tm_min / 10;
    for(int i = 0; i < 8; ++i) {
        dataForMax[2][i] = digitPatterns[digit][i];
    }

    // Set minutes ones digit pattern
    digit = timeinfo->tm_min % 10;
    for(int i = 0; i < 8; ++i) {
        dataForMax[3][i] = digitPatterns[digit][i];
    }

    // Set the colon pattern and PM indicator
    for(int i = 0; i < 8; ++i) {
        dataForMax[2][i] |= colonPattern[i]; // Combine the colon pattern with the minutes tens
    }
    if(pmFlag) {
        dataForMax[3][7] |= 0x80; // Turn on the top segment of the last digit for PM indicator
    }

    // Send data to each MAX7219
    for(int maxNumber = 0; maxNumber < NUM_MAX7219; ++maxNumber) {
        for(int segment = 1; segment <= 8; ++segment) {
            sendToMax(segment, dataForMax[maxNumber]);
        }
    }

}

int main() {
    if (wiringPiSetup() == -1) {
        fprintf(stderr, "Failed to setup WiringPi\n");
        return 1;
    }
    if (wiringPiSPISetup(SPI_CHANNEL, SPI_SPEED) == -1) {
        fprintf(stderr, "Failed to setup SPI\n");
        return 1;
    }

    initMax7219();
    clearMax7219();

    while (1) {
        time_t now = time(NULL);
        struct tm *current = localtime(&now);
        displayTime(current);
        delay(1000); // Update every second
    }

    return 0;
}
